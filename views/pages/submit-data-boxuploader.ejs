<!DOCTYPE html>
<html lang="en-US">

<head>

	<% include ../partials/head %>
    <meta charset="utf-8" />

    <title>minimo Content Uploader</title>

    <!-- polyfill.io only loads the polyfills your browser needs -->
    <script src="https://cdn.polyfill.io/v2/polyfill.min.js?features=es6,Intl"></script>
    
</head>


<body>

	<div id="header">

        <% var currentNavItem= "manage-data-nav-item"; %>
		<% include ../partials/header %>


	</div>

    <div id="content">
        <div id="content-feed">

            <div id="folder-selector-container" class="container">
            
                <!-- based on https://docs.min.io/docs/upload-files-from-browser-using-pre-signed-urls.html and https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/webkitdirectory -->
                <input type="file" id="selector" webkitdirectory multiple>
                <ul id="selected_files">Select a data folder for upload.</ul>

                <script type="text/javascript">
                    const valid_object_name = <%- valid_object_name %>;
                    // display selected filenames when selection is made (from https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/webkitdirectory)
                    document.getElementById("selector").addEventListener("change", function(event) {
                        document.getElementById("invalid-object-name-error-message").classList.add("hidden");
                        let selection_list = document.getElementById("selected_files");
                        selection_list.innerHTML = "";
                        let selected_files = event.target.files;
                        let all_object_names_valid = true;
                        for (let i=0; i < selected_files.length; i++) {
                            let item = document.createElement("li");
                            let relativePath = selected_files[i].webkitRelativePath;
                            item.innerHTML = relativePath;
                            if (! valid_object_name.test(relativePath)) {
                                all_object_names_valid = false;
                                item.classList.add("illegal-object-name");
                                document.getElementById("invalid-object-name-error-message").classList.remove("hidden");
                            }
                            selection_list.appendChild(item);
                        };
                        document.getElementById("submit-data-submit-button").disabled = ! all_object_names_valid;
                    }, false);

                    // first get presigned URLs for all selected files and upload them to MinIO
                    // then iterate through all selected files again to populate relevant metadata form fields and upload to MongoDB
                    function upload() {
                        var filenames = [];
                        var files = document.querySelector("#selector").files;
                        for (var i = 0; i < files.length; i++) {
                            var file = files[i];
                            filenames.push(file.webkitRelativePath);
                        }
                        fetch(`/presigned-urls?filenames=${filenames.toString()}`)
                        .then( response => response.json() )
                        .then( presignedUrls => uploadFiles(files, presignedUrls, filenames) )
                        .then( (prefix) => submitMetadataForm(prefix) )
                        .catch( error => {
                            console.error(error);
                        })
                    }

                    async function uploadFiles(files, presignedUrls, filenames) {
                        for (var i = 0; i < presignedUrls.urls.length; i++) {
                            file_li = Array.from(document.querySelectorAll("#selected_files li")).find(li => li.textContent === filenames[i])
                            file_li.innerText += ` uploading...`;
                            const response = await fetch(presignedUrls.urls[i].replace("http:", "https:"), { method: 'PUT', body: files[i] })
                            file_li.innerText = filenames[i] + (response.ok ? ' uploaded.' : ' ERROR.');
                        }
                        return presignedUrls.prefix;
                    }

                    function submitMetadataForm(prefix) {

                        // Get selected files from the input element.
                        var files = document.querySelector("#selector").files;

                        try{

                        var fl = '{ "fl" : ['

                        // grab file name and parent folder of every file
                        for(i=0; i < files.length;  i++){

                            // holder var
                            var file = files[i];

                            // continue on undefined
                            if (typeof(file) == 'undefined'){
                                continue
                            }

                            // grab file attributes
                            var filepath = file.webkitRelativePath
                            var filesize = file.size
                            var filename = file.name
                            var content_created_at = file.lastModified

                            fl = fl + '{"filename":"' + filename + '"'
                            + ', "filesize":"' + String(filesize) + '"'
                            + ', "filepath":"' + filepath + '"'
                            + ', "content_created_at":"' + content_created_at + '"'
                            + '},'

                        }

                        // remove the trailing comma (god dammit json)
                        fl = fl.slice(0, fl.length - 1)

                        // append the end of the array, including folderID
                        fl = fl + '],',
                        fl = fl + ' "folderID":"' + prefix + '",'
                        fl = fl + ' "bucket":"data"}'

                        // take the filelist (data from event) and append to form
                        document.getElementById('metadata_form').filelist.value = fl
                        var mdf = document.getElementById('metadata_form');

                        // add counts of forms used in submission
                        document.getElementById('metadata_form')['submitted form counts'].value = countFormUses();

                        // submit the form
                        document.getElementById('metadata_form').submit()

                        } catch(e){

                        console.log('Error during upload: ' + e)

                        }
                        
                    }

                </script>
            </div>
            <div id="invalid-object-name-error-message" class="hidden">
                <br>
                <p class="error-text"> One of more the objects that you have selected for upload has an invalid filename. Files selected for upload must have names which comprise only alphanumeric characters (a-z, A-Z, and 0-9) and the special characters /!-_.*'(). Additionally, names of files for upload must have lengths of at least 1 character and no more than 987 characters.</p>
            </div>

            <br><br>

            <div id="metadata_form_label">
            
                <p>
                    Use the selector above to select the data folder you would like to upload.
                </p>
                <p>
                    Then, complete the form below to specify the number of experiments associated with your data and the metadata for each associated experiment.
                </p>
                <p>
                    When you have completed these steps, click the "submit" button to begin your upload. You will be redirected to the "manage data" page when the upload is complete.
                </p>
            </div>

            <br><br>

            <% include ../partials/metadata-form-mongo %>

            <% include ../partials/count-form-uses %>

            <button id="submit-data-submit-button" class="myform" onclick="upload()">submit</button>
        </div>
    </div>

</body>
</html>
